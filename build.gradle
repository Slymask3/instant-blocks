buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'

version = "${project.mc_version}-${project.mod_version}"
group = project.mod_package
archivesBaseName = project.mod_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: "${project.mc_version}"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', project.mod_name
            mods {
                instantblocks {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', project.mod_name
            mods {
                instantblocks {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', project.mod_name
            mods {
                instantblocks {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', project.mod_name, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                instantblocks {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    compileOnly fg.deobf("mezz.jei:jei-${project.mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    runtimeOnly fg.deobf("mezz.jei:jei-${project.mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_title,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "${project.mc_version}-${project.mod_version}",
                "Implementation-Title"    : project.mod_name,
                "Implementation-Version"  : "${project.mc_version}-${project.mod_version}",
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}